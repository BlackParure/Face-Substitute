import cv2
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image
import os

class yale_image():
    """
    transform the dict to an object for the convenience of management
    """
    def __init__(self, img_dict):
        """
        :param img_dict: img_dict generated by grasp_image_information() function
        """
        # body cache the array of pixel tensity of the image
        self.body = img_dict["array"]
        # img_type includes 2 types Non-Ambient that includes azimuth and elevation and Ambient.
        self.img_type = img_dict["type"]
        if self.img_type == "Non-Ambient":
            self.azimuth = img_dict["azimuth"]
            self.elevation = img_dict["elevation"]

    def __getitem__(self, item):
        """
        Get the coordinate and return the pixel intensity.
        To coordinate the unique index in numpy
        :param item:
        :return: pixel intensity
        """
        output = 0
        if isinstance(item, tuple):
            x = item[0]
            y = item[1]
            output = self.body[y, x]
        else:
            raise TypeError("Expected tuple, but unknown get")
        return output

def grasp_image_information(path):
    """
    grasp the pgm image informations(azimuth, elevation, body, etc.)
    :param path: the path of the image
    :return: a dictonary contains the information of the pgm image
    """
    img_info = {}
    img_info["array"] = np.array(cv2.cvtColor(cv2.imread(path), cv2.COLOR_BGR2GRAY))

    img_name = os.path.split(path)[-1]
    img_details = img_name[11: -4]

    if img_details == "_Ambient":
        img_info["type"] = "Ambient"
    else:
        img_info["type"] = "Non-Ambient"
        img_info["azimuth"] = int(img_details[1: 5])
        img_info["elevation"] = int(img_details[7: 10])
    return img_info

def file_filter(path):
    """
    only return the path of the .pgm image under the objective path
    :param path: the path of the directory
    :return: list of pgm image
    """
    files = os.listdir(path)
    images = []
    for file in files:
        if file.endswith(".pgm"):
            images.append(os.path.join(path, file))
    return images

def cache_images(path):
    """
    cache_images in a list
    :param path: the path of the directory
    :return: a list that contains the information of the images
    """
    images = []
    images_path = file_filter(path)
    for image_path in images_path:
        images.append(yale_image(grasp_image_information(image_path)))

    return images

def cache_images_yaleB02():
    path = r"D:\library\python\opencv\04\yaleB02"
    imgs = cache_images(path)
    return imgs

def cache_images_yaleB23():
    path = r"D:\library\python\opencv\04\yaleB23"
    imgs = cache_images(path)
    return imgs

def cache_images_yaleB17():
    path = r"D:\library\python\opencv\04\yaleB17"
    imgs = cache_images(path)
    return imgs

def cache_images_yaleB01():
    path = r"D:\library\python\opencv\04\yaleB01"
    imgs = cache_images(path)
    return imgs

def cache_images_yale(num):
    if num <=9:
        path = r"D:\library\python\opencv\04\yaleB0{}".format(num)
    else:
        path = r"D:\library\python\opencv\04\yaleB{}".format(num)
    imgs = cache_images(path)
    return imgs

if __name__ == "__main__":
    cache_images_yaleB01()
